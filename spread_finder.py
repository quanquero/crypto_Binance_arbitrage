import requests
import time
from datetime import datetime
import pandas as pd
import os
import asyncio
import aiohttp
import json
import websockets
from typing import List, Dict, Optional, Set
from collections import defaultdict

class SpreadFinder:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–µ–¥–æ–≤"""
        self.PUBLIC_API_URL = "https://api.exchange.coinbase.com"
        self.WS_URL = "wss://ws-feed.exchange.coinbase.com"
        self.MIN_VOLUME_USD = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.CACHE_FILE = "spreads_cache.json"
        self.CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.spreads_data = defaultdict(dict)
        self.active_pairs = set()
        self.ws_connection = None
        self.ws_task = None

    async def connect_websocket(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.ws_connection = await websockets.connect(self.WS_URL)
            print("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            subscribe_message = {
                "type": "subscribe",
                "product_ids": list(self.active_pairs),
                "channels": ["ticker", "level2"]
            }
            
            await self.ws_connection.send(json.dumps(subscribe_message))
            print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(self.active_pairs)} –ø–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {str(e)}")
            raise

    async def process_websocket_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        try:
            data = json.loads(message)
            
            if data.get("type") == "ticker":
                pair = data.get("product_id")
                if pair in self.active_pairs:
                    self.spreads_data[pair].update({
                        '–ü–∞—Ä–∞': pair,
                        '–ë–∏–¥': float(data.get("bid", 0)),
                        '–ê—Å–∫': float(data.get("ask", 0)),
                        '–û–±—ä–µ–º –±–∏–¥–∞': float(data.get("bid_size", 0)),
                        '–û–±—ä–µ–º –∞—Å–∫–∞': float(data.get("ask_size", 0)),
                        'timestamp': time.time()
                    })
                    
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    bid = self.spreads_data[pair]['–ë–∏–¥']
                    ask = self.spreads_data[pair]['–ê—Å–∫']
                    if bid > 0:
                        self.spreads_data[pair]['–°–ø—Ä–µ–¥ %'] = ((ask - bid) / bid) * 100
                        self.spreads_data[pair]['–û–±—ä–µ–º USD'] = min(
                            self.spreads_data[pair]['–û–±—ä–µ–º –±–∏–¥–∞'] * bid,
                            self.spreads_data[pair]['–û–±—ä–µ–º –∞—Å–∫–∞'] * ask
                        )
            
            elif data.get("type") == "l2update":
                pair = data.get("product_id")
                if pair in self.active_pairs:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω
                    changes = data.get("changes", [])
                    for change in changes:
                        side, price, size = change
                        if side == "buy":
                            self.spreads_data[pair]['–ë–∏–¥'] = float(price)
                            self.spreads_data[pair]['–û–±—ä–µ–º –±–∏–¥–∞'] = float(size)
                        elif side == "sell":
                            self.spreads_data[pair]['–ê—Å–∫'] = float(price)
                            self.spreads_data[pair]['–û–±—ä–µ–º –∞—Å–∫–∞'] = float(size)
                    
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    bid = self.spreads_data[pair]['–ë–∏–¥']
                    ask = self.spreads_data[pair]['–ê—Å–∫']
                    if bid > 0:
                        self.spreads_data[pair]['–°–ø—Ä–µ–¥ %'] = ((ask - bid) / bid) * 100
                        self.spreads_data[pair]['–û–±—ä–µ–º USD'] = min(
                            self.spreads_data[pair]['–û–±—ä–µ–º –±–∏–¥–∞'] * bid,
                            self.spreads_data[pair]['–û–±—ä–µ–º –∞—Å–∫–∞'] * ask
                        )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def websocket_listener(self):
        """–°–ª—É—à–∞—Ç–µ–ª—å WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                if self.ws_connection is None:
                    await self.connect_websocket()
                
                message = await self.ws_connection.recv()
                await self.process_websocket_message(message)
                
            except websockets.exceptions.ConnectionClosed:
                print("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                await asyncio.sleep(5)
                self.ws_connection = None
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ WebSocket –ª–∏—Å—Ç–µ–Ω–µ—Ä–µ: {str(e)}")
                await asyncio.sleep(5)

    async def start_websocket(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ws_task is None:
            self.ws_task = asyncio.create_task(self.websocket_listener())

    async def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ws_task:
            self.ws_task.cancel()
            self.ws_task = None
        if self.ws_connection:
            await self.ws_connection.close()
            self.ws_connection = None

    async def update_active_pairs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.PUBLIC_API_URL}/products") as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {response.status}")
                
                products = await response.json()
                new_pairs = {p['id'] for p in products if p.get('status') == 'online'}
                
                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                if new_pairs != self.active_pairs:
                    self.active_pairs = new_pairs
                    if self.ws_connection:
                        await self.stop_websocket()
                        await self.start_websocket()

    def _process_spreads(self, spreads: List[Dict], limit: int, start_time: float) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if spreads:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
            sorted_spreads = sorted(spreads, key=lambda x: x['–°–ø—Ä–µ–¥ %'], reverse=True)
            top_spreads = sorted_spreads[:limit]
            
            print("\n\nüèÜ –¢–û–ü –ü–ê–†–´ –ü–û –°–ü–†–ï–î–£:")
            print("-" * 65)
            print("–ü–∞—Ä–∞      | –°–ø—Ä–µ–¥ %  | –ë–∏–¥        | –ê—Å–∫        | –û–±—ä–µ–º USD")
            print("-" * 65)
            
            for spread in top_spreads:
                print(f"{spread['–ü–∞—Ä–∞']:<9} | {spread['–°–ø—Ä–µ–¥ %']:8.2f} | {spread['–ë–∏–¥']:10.8f} | {spread['–ê—Å–∫']:10.8f} | {spread['–û–±—ä–µ–º USD']:10.2f}")
            
            execution_time = time.time() - start_time
            print("\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {:.2f} —Å–µ–∫".format(execution_time))
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(spreads)} –ø–∞—Ä —Å–æ —Å–ø—Ä–µ–¥–æ–º >= {min_spread}%")
            
            return top_spreads
        else:
            print(f"\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å–æ —Å–ø—Ä–µ–¥–æ–º –±–æ–ª—å—à–µ {min_spread}%")
            return []

    async def find_top_spreads(self, min_spread=0.5, limit=10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–∞—Ä —Å –ª—É—á—à–∏–º–∏ —Å–ø—Ä–µ–¥–∞–º–∏"""
        try:
            print(f"\n{'='*20} –ü–û–ò–°–ö –°–ü–†–ï–î–û–í {'='*20}")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {min_spread}%")
            start_time = time.time()

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            await self.start_websocket()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            await self.update_active_pairs()
            
            # –ñ–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(2)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            spreads = [
                data for data in self.spreads_data.values()
                if data.get('–°–ø—Ä–µ–¥ %', 0) >= min_spread and data.get('–û–±—ä–µ–º USD', 0) >= self.MIN_VOLUME_USD
            ]
            
            return self._process_spreads(spreads, limit, start_time)

        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ø—Ä–µ–¥–æ–≤: {str(e)}")
            return []

    async def analyze_pair(self, pair_id: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            print(f"\n{'='*20} –ê–ù–ê–õ–ò–ó –ü–ê–†–´ {pair_id} {'='*20}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            await self.start_websocket()
            
            # –ñ–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(2)
            
            if pair_id in self.spreads_data:
                data = self.spreads_data[pair_id]
                
                print("\nüìä –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´")
                print(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (bid): {data['–ë–∏–¥']:.8f}")
                print(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (ask): {data['–ê—Å–∫']:.8f}")
                print(f"–¢–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {data['–°–ø—Ä–µ–¥ %']:.2f}%")
                print(f"–û–±—ä–µ–º –±–∏–¥–∞: {data['–û–±—ä–µ–º –±–∏–¥–∞']:.8f}")
                print(f"–û–±—ä–µ–º –∞—Å–∫–∞: {data['–û–±—ä–µ–º –∞—Å–∫–∞']:.8f}")
                print(f"–û–±—ä–µ–º USD: {data['–û–±—ä–µ–º USD']:.2f}")
                
                return data
            else:
                print(f"–ü–∞—Ä–∞ {pair_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return {}
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ä—ã: {str(e)}")
            return {}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    finder = SpreadFinder()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å–ø—Ä–µ–¥—ã")
        print("2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
        
        if choice == "1":
            min_spread = float(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (%): ") or "0.5")
            limit = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ") or "10")
            await finder.find_top_spreads(min_spread, limit)
            
        elif choice == "2":
            pair = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USD): ")
            await finder.analyze_pair(pair)
            
        elif choice == "3":
            await finder.stop_websocket()
            break
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    asyncio.run(main()) 