import jwt  # –∏—Å–ø–æ–ª—å–∑—É–µ–º PyJWT –≤–º–µ—Å—Ç–æ jose
import base64
import time
import secrets
import requests
import json

class BalanceCheckerEU:
    def __init__(self):
        # EU API –∫–ª—é—á–∏
        self.API_KEY = "650178fe-dc79-4e01-8607-9a388ab387f2"
        self.API_SECRET = "uGybuFFiYIv2PFgSdr+/12ua+d4Je/xefW9qb2S9AkqvZEVw23uosY6bz+s+vG0yXfC1z8iSD99MibBAXUzgPQ=="
        self.API_URL = "https://api.coinbase.com"

    def sign_request(self, method, path, body=""):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Coinbase Advanced Trade API
        https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_postorder
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ base64
            secret_bytes = base64.b64decode(self.API_SECRET)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            timestamp = int(time.time())
            message = f"{timestamp}{method.upper()}{path}{body}"
            
            # –°–æ–∑–¥–∞–µ–º HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
            import hmac
            import hashlib
            signature = hmac.new(secret_bytes, message.encode(), hashlib.sha256).hexdigest()
            
            print(f"üîë –ü–æ–¥–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            
            return {
                'signature': signature,
                'timestamp': timestamp
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {str(e)}")
            return None

    def show_balances(self):
        try:
            path = '/api/v3/brokerage/accounts'
            method = 'GET'
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
            auth = self.sign_request(method, path)
            if not auth:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—å")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            headers = {
                'Content-Type': 'application/json',
                'CB-ACCESS-KEY': self.API_KEY,
                'CB-ACCESS-SIGN': auth['signature'],
                'CB-ACCESS-TIMESTAMP': str(auth['timestamp'])
            }
            
            print(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞...")
            print(f"URL: {self.API_URL}{path}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {json.dumps({k: headers[k] for k in headers if k != 'CB-ACCESS-SIGN'}, indent=2)}")
            
            response = requests.get(
                f'{self.API_URL}{path}',
                headers=headers
            )
            
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
            
            if response.status_code == 200:
                accounts = response.json()
                
                print("\n=================== –ë–ê–õ–ê–ù–°–´ –ê–ö–ö–ê–£–ù–¢–ê EU ===================")
                print("–í–∞–ª—é—Ç–∞  | –î–æ—Å—Ç—É–ø–Ω–æ         | –í –æ—Ä–¥–µ—Ä–∞—Ö        | –í—Å–µ–≥–æ")
                print("-" * 60)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ
                sorted_accounts = sorted(
                    accounts.get('accounts', []),
                    key=lambda x: float(x['available_balance']['value']) + float(x['hold']['value']),
                    reverse=True
                )
                
                total_usd = 0
                
                for account in sorted_accounts:
                    currency = account['currency']
                    available = float(account['available_balance']['value'])
                    hold = float(account['hold']['value'])
                    total = available + hold
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
                    if total > 0:
                        print(f"{currency:<8}| {available:<15.8f} | {hold:<15.8f} | {total:<.8f}")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å USD value, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—É–º–º–µ
                        if 'usd_value' in account:
                            total_usd += float(account['usd_value'])
                
                print("-" * 60)
                if total_usd > 0:
                    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_usd:.2f}")
                print("======================================================")
                
                return accounts
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"‚ùå –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}")
            import traceback
            traceback.print_exc()
            return None

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
if __name__ == "__main__":
    checker = BalanceCheckerEU()
    checker.show_balances() 