from jose import jwt
from cryptography.hazmat.primitives.serialization import load_pem_private_key
import time
import requests
import statistics
import secrets
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import socket

class CoinbasePingChecker:
    def __init__(self):
        # USA API –∫–ª—é—á–∏ (—Ñ–æ—Ä–º–∞—Ç —Å organizations/...)
        self.KEY_NAME = ""
        self.KEY_SECRET = """"""
        self.API_URL = "https://api.coinbase.com"
        self.PUBLIC_API_URL = "https://api.exchange.coinbase.com"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.session = self._create_robust_session()
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ DNS-—Å–µ—Ä–≤–µ—Ä—ã –∏ –∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        self.dns_servers = {
            "Google DNS": "8.8.8.8",
            "Cloudflare DNS": "1.1.1.1",
            "OpenDNS": "208.67.222.222",
            "Quad9": "9.9.9.9",
            "Local Default": None  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DNS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
    def _create_robust_session(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        session = requests.Session()
        retry_strategy = Retry(
            total=3,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            backoff_factor=1,  # —Ñ–∞–∫—Ç–æ—Ä —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
            status_forcelist=[429, 500, 502, 503, 504],  # —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            allowed_methods=["GET"]  # —Ç–æ–ª—å–∫–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        return session
        
    def get_jwt_token(self, method, path, body=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (USA —Ñ–æ—Ä–º–∞—Ç)"""
        try:
            private_key = load_pem_private_key(
                self.KEY_SECRET.encode(),
                password=None
            )
            uri = f"{method} api.coinbase.com{path}"
            timestamp = int(time.time())
            
            payload = {
                'sub': self.KEY_NAME,
                'iss': 'coinbase-cloud',
                'nbf': timestamp,
                'exp': timestamp + 120,
                'uri': uri
            }
            
            token = jwt.encode(
                payload,
                private_key,
                algorithm='ES256',
                headers={
                    'kid': self.KEY_NAME,
                    'nonce': secrets.token_hex(16)
                }
            )
            
            return token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return None
    
    def check_dns_connectivity(self, hostname="api.coinbase.com", timeout=5):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ö–æ—Å—Ç–æ–º —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ DNS-—Å–µ—Ä–≤–µ—Ä—ã
        
        Args:
            hostname: –∏–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            timeout: —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DNS-–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ DNS-—Å–µ—Ä–≤–µ—Ä–∞
        """
        print(f"\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {hostname}...")
        results = {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π DNS-—Å–µ—Ä–≤–µ—Ä
        original_nameserver = socket.getaddrinfo(hostname, None)[0][4][0]
        print(f"–¢–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å –¥–ª—è {hostname}: {original_nameserver}")
        
        for dns_name, dns_server in self.dns_servers.items():
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {dns_name} {'(' + dns_server + ')' if dns_server else ''}")
            
            if dns_server:
                # –≠—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏, 
                # –≤ Windows –∏–∑–º–µ–Ω–µ–Ω–∏–µ DNS —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                print(f"‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                print(f"‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π DNS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é DNS
                start_time = time.time()
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è DNS-—Å–µ—Ä–≤–µ—Ä–∞
                # –ù–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                try:
                    ip_address = socket.gethostbyname(hostname)
                    resolve_time = (time.time() - start_time) * 1000
                    print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS: {hostname} -> {ip_address} (–∑–∞ {resolve_time:.2f} –º—Å)")
                    
                    # TCP-–ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É 443 (HTTPS)
                    start_tcp = time.time()
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.settimeout(timeout)
                    
                    try:
                        s.connect((ip_address, 443))
                        tcp_time = (time.time() - start_tcp) * 1000
                        print(f"‚úÖ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø–æ—Ä—Ç 443): –£—Å–ø–µ—à–Ω–æ (–∑–∞ {tcp_time:.2f} –º—Å)")
                        results[dns_name] = {
                            "resolved_ip": ip_address,
                            "dns_resolve_time_ms": resolve_time,
                            "tcp_connect_time_ms": tcp_time,
                            "status": "success"
                        }
                    except socket.timeout:
                        print(f"‚ùå TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –¢–∞–π–º–∞—É—Ç (>{timeout} —Å–µ–∫)")
                        results[dns_name] = {
                            "resolved_ip": ip_address,
                            "dns_resolve_time_ms": resolve_time,
                            "status": "tcp_timeout"
                        }
                    except socket.error as e:
                        print(f"‚ùå TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ {str(e)}")
                        results[dns_name] = {
                            "resolved_ip": ip_address,
                            "dns_resolve_time_ms": resolve_time,
                            "status": "tcp_error",
                            "error": str(e)
                        }
                    finally:
                        s.close()
                        
                except socket.gaierror as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è DNS: {str(e)}")
                    results[dns_name] = {
                        "status": "dns_error",
                        "error": str(e)
                    }
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ DNS-–ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
                results[dns_name] = {
                    "status": "error",
                    "error": str(e)
                }
        
        return results
    
    def check_ping(self, endpoint="/api/v3/brokerage/accounts", num_requests=3, timeout=10):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∏–Ω–≥ –¥–æ API Coinbase —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º USA —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π
        
        Args:
            endpoint: —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            num_requests: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            timeout: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞
        """
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –Ω–∞ {self.API_URL}{endpoint}")
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫")
        
        times = []
        status_codes = []
        errors = []
        
        for i in range(num_requests):
            try:
                # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                token = self.get_jwt_token("GET", endpoint)
                
                if not token:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω")
                    errors.append("JWT token error")
                    continue
                
                headers = {
                    'Authorization': f'Bearer {token}',
                    'Content-Type': 'application/json'
                }
                
                print(f"–ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                start_time = time.time()
                
                try:
                    response = self.session.get(
                        f"{self.API_URL}{endpoint}", 
                        headers=headers, 
                        timeout=timeout
                    )
                    end_time = time.time()
                    
                    response_time_ms = (end_time - start_time) * 1000
                    times.append(response_time_ms)
                    status_codes.append(response.status_code)
                    
                    status = "‚úÖ" if response.status_code == 200 else "‚ùå"
                    print(f"–ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: {status} –ö–æ–¥: {response.status_code}, –í—Ä–µ–º—è: {response_time_ms:.2f} –º—Å")
                
                except requests.exceptions.Timeout:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (>{timeout} —Å–µ–∫)")
                    errors.append("Timeout")
                    
                except requests.exceptions.ConnectionError:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    errors.append("Connection Error")
                    
                except Exception as e:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: {str(e)}")
                    errors.append(str(e))
                
            except Exception as e:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                errors.append(str(e))
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        public_times = []
        public_status = []
        public_errors = []
        public_endpoint = "/products"
        
        for i in range(num_requests):
            try:
                print(f"–ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –æ—Ç–ø—Ä–∞–≤–∫–∞...")
                start_time = time.time()
                
                try:
                    response = self.session.get(
                        f"{self.PUBLIC_API_URL}{public_endpoint}",
                        timeout=timeout
                    )
                    end_time = time.time()
                    
                    response_time_ms = (end_time - start_time) * 1000
                    public_times.append(response_time_ms)
                    public_status.append(response.status_code)
                    
                    status = "‚úÖ" if response.status_code == 200 else "‚ùå"
                    print(f"–ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: {status} –í—Ä–µ–º—è: {response_time_ms:.2f} –º—Å")
                    
                except requests.exceptions.Timeout:
                    print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (>{timeout} —Å–µ–∫)")
                    public_errors.append("Timeout")
                    
                except requests.exceptions.ConnectionError:
                    print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    public_errors.append("Connection Error")
                    
                except Exception as e:
                    print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: {str(e)}")
                    public_errors.append(str(e))
                
            except Exception as e:
                print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{num_requests}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                public_errors.append(str(e))
            
            time.sleep(2)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ü–ò–ù–ì–ê:")
        
        if times:
            avg_time = sum(times) / len(times)
            min_time = min(times)
            max_time = max(times)
            median_time = statistics.median(times) if len(times) > 0 else None
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API (USA –∫–ª—é—á–∏):")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(times)}/{num_requests}")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} –º—Å")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f} –º—Å")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f} –º—Å")
            print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {median_time:.2f} –º—Å" if median_time else "–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: N/A")
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥—ã: {status_codes}")
            if errors:
                print(f"–û—à–∏–±–∫–∏: {errors}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É API")
            print(f"–û—à–∏–±–∫–∏: {errors}")
        
        if public_times:
            avg_public = sum(public_times) / len(public_times)
            min_public = min(public_times)
            max_public = max(public_times)
            median_public = statistics.median(public_times) if len(public_times) > 0 else None
            
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ API:")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(public_times)}/{num_requests}")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_public:.2f} –º—Å")
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_public:.2f} –º—Å")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_public:.2f} –º—Å")
            print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {median_public:.2f} –º—Å" if median_public else "–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: N/A")
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥—ã: {public_status}")
            if public_errors:
                print(f"–û—à–∏–±–∫–∏: {public_errors}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API")
            print(f"–û—à–∏–±–∫–∏: {public_errors}")
        
        return {
            "private_api": {
                "success_count": len(times),
                "total_requests": num_requests,
                "average": avg_time if times else None,
                "min": min_time if times else None,
                "max": max_time if times else None,
                "median": median_time if times else None,
                "status_codes": status_codes,
                "errors": errors,
                "all_times": times
            },
            "public_api": {
                "success_count": len(public_times),
                "total_requests": num_requests,
                "average": avg_public if public_times else None,
                "min": min_public if public_times else None,
                "max": max_public if public_times else None,
                "median": median_public if public_times else None,
                "status_codes": public_status,
                "errors": public_errors,
                "all_times": public_times
            }
        }
    
    def run_full_diagnostics(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Coinbase API
        """
        print("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Coinbase API\n")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        dns_results = self.check_dns_connectivity()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –¥–æ API
        ping_results = self.check_ping(num_requests=2, timeout=15)
        
        # 3. –û–±–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìã –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–ï–î–ò–ù–ï–ù–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ DNS
        dns_success = any(result.get("status") == "success" for result in dns_results.values())
        print(f"DNS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' if dns_success else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
        private_success = ping_results["private_api"]["success_count"] > 0
        print(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if private_success else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
        public_success = ping_results["public_api"]["success_count"] > 0
        print(f"–ü—É–±–ª–∏—á–Ω—ã–π API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if public_success else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not dns_success:
            print("1Ô∏è‚É£ –ü—Ä–æ–±–ª–µ–º—ã —Å DNS-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏–º–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å DNS –Ω–∞ 1.1.1.1 (Cloudflare) –∏–ª–∏ 8.8.8.8 (Google)")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç—É–ø –∫ Coinbase –≤–∞—à–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")
        elif not public_success:
            print("2Ô∏è‚É£ –ü—É–±–ª–∏—á–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç—É–ø –∫ Coinbase –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN-—Å–µ—Ä–≤–∏—Å –∏–∑ –°–®–ê –∏–ª–∏ –ï–≤—Ä–æ–ø—ã")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞ –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞")
        elif not private_success:
            print("3Ô∏è‚É£ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API-–∫–ª—é—á–µ–π")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∫–ª—é—á–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞")
        else:
            print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        return {
            "dns_results": dns_results,
            "ping_results": ping_results,
            "summary": {
                "dns_success": dns_success,
                "private_api_success": private_success,
                "public_api_success": public_success
            }
        }

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if __name__ == "__main__":
    checker = CoinbasePingChecker()
    results = checker.run_full_diagnostics() 
